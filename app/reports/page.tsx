'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/app/components/Button'
import Navigation from '@/app/components/Navigation'
import { formatDate, formatCurrency } from '@/lib/utils'
import { toast } from 'sonner'

interface ReportData {
  summary?: {
    banks: number
    cards: number
    transactions: number
  }
  transactions?: Array<{
    id: string
    transaction_type: string
    amount: number
    profit: number
    status: string
    transaction_date: string
    cards: {
      card_number: string
      card_type: string
    }
    casinos: {
      name: string
    }
  }>
  cards?: Array<{
    id: string
    card_number: string
    card_type: string
    status: string
    bank_accounts: {
      account_name: string
      banks: {
        name: string
      }
    }
  }>
}

export default function ReportsPage() {
  const [reportData, setReportData] = useState<ReportData>({})
  const [isLoading, setIsLoading] = useState(true)
  const [reportType, setReportType] = useState('summary')
  const [startDate, setStartDate] = useState('')
  const [endDate, setEndDate] = useState('')
  const [userRole, setUserRole] = useState('')
  const router = useRouter()

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = localStorage.getItem('user')
    if (userData) {
      const user = JSON.parse(userData)
      setUserRole(user.role)
    }
  }, [])

  useEffect(() => {
    loadReport()
  }, [reportType, startDate, endDate])

  const loadReport = async () => {
    try {
      const authToken = localStorage.getItem('auth-token')
      if (!authToken) {
        router.push('/login')
        return
      }

      let url = `/api/reports?type=${reportType}`
      if (startDate) url += `&startDate=${startDate}`
      if (endDate) url += `&endDate=${endDate}`

      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      })
      
      console.log('Reports response:', response.status)
      
      if (response.ok) {
        const data = await response.json()
        setReportData(data.report || {})
      } else {
        console.error('Failed to load report')
        toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞')
      }
    } catch (error) {
      console.error('Reports error:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞')
    } finally {
      setIsLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'from-green-500 to-green-600'
      case 'pending': return 'from-yellow-500 to-yellow-600'
      case 'failed': return 'from-red-500 to-red-600'
      default: return 'from-gray-500 to-gray-600'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return '‚úÖ'
      case 'pending': return '‚è≥'
      case 'failed': return '‚ùå'
      default: return '‚ùì'
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'deposit': return 'üí∞'
      case 'withdrawal': return 'üí∏'
      default: return 'üí≥'
    }
  }

  const getCardTypeIcon = (type: string) => {
    switch (type) {
      case 'pink': return 'ü©∑'
      case 'gray': return '‚ö´'
      default: return 'üí≥'
    }
  }

  const getCardStatusColor = (status: string) => {
    switch (status) {
      case 'free': return 'from-green-500 to-green-600'
      case 'assigned': return 'from-blue-500 to-blue-600'
      case 'in_process': return 'from-yellow-500 to-yellow-600'
      case 'completed': return 'from-purple-500 to-purple-600'
      default: return 'from-gray-500 to-gray-600'
    }
  }

  const getCardStatusIcon = (status: string) => {
    switch (status) {
      case 'free': return 'üÜì'
      case 'assigned': return 'üìã'
      case 'in_process': return '‚ö°'
      case 'completed': return '‚úÖ'
      default: return '‚ùì'
    }
  }

  const exportReport = () => {
    const dataStr = JSON.stringify(reportData, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = `report-${reportType}-${new Date().toISOString().split('T')[0]}.json`
    link.click()
    URL.revokeObjectURL(url)
    toast.success('–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900">
      <Navigation userRole={userRole} />
      
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-white mb-2 flex items-center">
            <span className="mr-3">üìä</span>
            –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
          </h1>
          <p className="text-blue-200">–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è–º</p>
        </div>

        {/* Report Controls */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 mb-8">
          <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
            <span className="mr-2">‚öôÔ∏è</span>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –¢–∏–ø –æ—Ç—á–µ—Ç–∞
              </label>
              <select
                value={reportType}
                onChange={(e) => setReportType(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
              >
                <option value="summary">üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</option>
                <option value="transactions">üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</option>
                <option value="cards">üí≥ –ö–∞—Ä—Ç—ã</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
              </label>
              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
              />
            </div>
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
              </label>
              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
              />
            </div>
            <div className="flex items-end">
              <Button onClick={exportReport} className="w-full">
                üì• –≠–∫—Å–ø–æ—Ä—Ç
              </Button>
            </div>
          </div>
        </div>

        {/* Loading */}
        {isLoading && (
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-8 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞...</p>
          </div>
        )}

        {/* Summary Report */}
        {!isLoading && reportType === 'summary' && reportData.summary && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
              <div className="flex items-center">
                <div className="h-12 w-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg mr-4">
                  <span className="text-2xl">üè¶</span>
                </div>
                <div>
                  <h3 className="text-lg font-medium text-gray-900">–ë–∞–Ω–∫–∏</h3>
                  <p className="text-3xl font-bold text-blue-600">
                    {reportData.summary.banks}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
              <div className="flex items-center">
                <div className="h-12 w-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg mr-4">
                  <span className="text-2xl">üí≥</span>
                </div>
                <div>
                  <h3 className="text-lg font-medium text-gray-900">–ö–∞—Ä—Ç—ã</h3>
                  <p className="text-3xl font-bold text-purple-600">
                    {reportData.summary.cards}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
              <div className="flex items-center">
                <div className="h-12 w-12 bg-gradient-to-r from-green-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg mr-4">
                  <span className="text-2xl">üí∞</span>
                </div>
                <div>
                  <h3 className="text-lg font-medium text-gray-900">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h3>
                  <p className="text-3xl font-bold text-green-600">
                    {reportData.summary.transactions}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Transactions Report */}
        {!isLoading && reportType === 'transactions' && reportData.transactions && (
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 overflow-hidden">
            <div className="px-6 py-4 border-b border-white/20 bg-gradient-to-r from-green-50 to-blue-50">
              <h2 className="text-lg font-bold text-gray-900">üí∞ –û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º</h2>
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-white/20">
                <thead className="bg-white/50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üé∞ –ö–∞–∑–∏–Ω–æ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üí∞ –°—É–º–º–∞
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üíµ –ü—Ä–∏–±—ã–ª—å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üìä –°—Ç–∞—Ç—É—Å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üìÖ –î–∞—Ç–∞
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white/30 divide-y divide-white/20">
                  {reportData.transactions.map((transaction) => (
                    <tr key={transaction.id} className="hover:bg-white/50 transition-colors duration-200">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            <div className="h-10 w-10 rounded-xl bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center shadow-lg">
                              <span className="text-lg">{getTypeIcon(transaction.transaction_type)}</span>
                            </div>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-bold text-gray-900 capitalize">
                              {transaction.transaction_type === 'deposit' ? '–î–µ–ø–æ–∑–∏—Ç' : '–í—ã–≤–æ–¥'}
                            </div>
                            <div className="text-sm text-gray-600">
                              {transaction.cards.card_number} ‚Ä¢ {transaction.cards.card_type}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-bold text-gray-900">
                          {transaction.casinos.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className={`text-sm font-bold ${
                          transaction.transaction_type === 'deposit' ? 'text-green-600' : 'text-red-600'
                        } bg-white/70 px-3 py-1 rounded-lg inline-block`}>
                          {transaction.transaction_type === 'deposit' ? '+' : '-'}{formatCurrency(transaction.amount)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-bold text-green-600 bg-green-50 px-3 py-1 rounded-lg inline-block">
                          +{formatCurrency(transaction.profit)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full bg-gradient-to-r ${getStatusColor(transaction.status)} text-white shadow-lg`}>
                          {getStatusIcon(transaction.status)} {
                            transaction.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                            transaction.status === 'pending' ? '–í –æ–∂–∏–¥–∞–Ω–∏–∏' :
                            transaction.status === 'failed' ? '–û—à–∏–±–∫–∞' : transaction.status
                          }
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        üìÖ {formatDate(transaction.transaction_date)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Cards Report */}
        {!isLoading && reportType === 'cards' && reportData.cards && (
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 overflow-hidden">
            <div className="px-6 py-4 border-b border-white/20 bg-gradient-to-r from-purple-50 to-pink-50">
              <h2 className="text-lg font-bold text-gray-900">üí≥ –û—Ç—á–µ—Ç –ø–æ –∫–∞—Ä—Ç–∞–º</h2>
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-white/20">
                <thead className="bg-white/50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üí≥ –ö–∞—Ä—Ç–∞
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üè¶ –ë–∞–Ω–∫
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                      üìä –°—Ç–∞—Ç—É—Å
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white/30 divide-y divide-white/20">
                  {reportData.cards.map((card) => (
                    <tr key={card.id} className="hover:bg-white/50 transition-colors duration-200">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            <div className="h-10 w-10 rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center shadow-lg">
                              <span className="text-lg">{getCardTypeIcon(card.card_type)}</span>
                            </div>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-bold text-gray-900">
                              {card.card_number}
                            </div>
                            <div className="text-sm text-gray-600 capitalize">
                              {card.card_type === 'pink' ? '–†–æ–∑–æ–≤–∞—è' : '–°–µ—Ä–∞—è'}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-bold text-gray-900">
                          {card.bank_accounts.banks.name}
                        </div>
                        <div className="text-sm text-gray-600">
                          {card.bank_accounts.account_name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full bg-gradient-to-r ${getCardStatusColor(card.status)} text-white shadow-lg`}>
                          {getCardStatusIcon(card.status)} {
                            card.status === 'free' ? '–°–≤–æ–±–æ–¥–Ω–∞' :
                            card.status === 'assigned' ? '–ù–∞–∑–Ω–∞—á–µ–Ω–∞' :
                            card.status === 'in_process' ? '–í —Ä–∞–±–æ—Ç–µ' :
                            card.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : card.status
                          }
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* No Data */}
        {!isLoading && (!reportData.summary && !reportData.transactions && !reportData.cards) && (
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-8 text-center">
            <div className="text-6xl mb-4">üìä</div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
            <p className="text-gray-600">–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
          </div>
        )}
      </div>
    </div>
  )
}
