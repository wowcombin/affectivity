'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/app/components/Button'
import Navigation from '@/app/components/Navigation'
import { formatDate, formatCurrency } from '@/lib/utils'
import { toast } from 'sonner'

interface Transaction {
  id: string
  employee_id: string
  card_id: string
  casino_id: string
  transaction_type: string
  amount: number
  profit: number
  status: string
  transaction_date: string
  notes: string | null
  created_at: string
  cards: {
    card_number: string
    card_type: string
  }
  casinos: {
    name: string
  }
  employees: {
    username: string
    full_name: string
  }
}

export default function TransactionsPage() {
  const [transactions, setTransactions] = useState<Transaction[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [userRole, setUserRole] = useState('')
  const [filterType, setFilterType] = useState('all')
  const [filterStatus, setFilterStatus] = useState('all')
  const router = useRouter()

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = localStorage.getItem('user')
    if (userData) {
      const user = JSON.parse(userData)
      setUserRole(user.role)
    }
    loadTransactions()
  }, [])

  const loadTransactions = async () => {
    try {
      const authToken = localStorage.getItem('auth-token')
      if (!authToken) {
        router.push('/login')
        return
      }

      const response = await fetch('/api/transactions', {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      })
      
      console.log('Transactions response:', response.status)
      
      if (response.ok) {
        const data = await response.json()
        setTransactions(data.transactions || [])
      } else {
        console.error('Failed to load transactions')
        toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
      }
    } catch (error) {
      console.error('Transactions error:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
    } finally {
      setIsLoading(false)
    }
  }

  const handleLogout = async () => {
    try {
      await fetch('/api/auth/logout', { method: 'POST' })
      localStorage.removeItem('auth-token')
      localStorage.removeItem('user')
      
      // –û—á–∏—â–∞–µ–º cookie
      document.cookie = 'auth-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'
      
      router.push('/login')
      toast.success('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    } catch (error) {
      console.error('Logout error:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    }
  }

  const getFilteredTransactions = () => {
    let filtered = transactions

    if (filterType !== 'all') {
      filtered = filtered.filter(t => t.transaction_type === filterType)
    }

    if (filterStatus !== 'all') {
      filtered = filtered.filter(t => t.status === filterStatus)
    }

    return filtered
  }

  const getTotalAmount = () => {
    return getFilteredTransactions().reduce((sum, t) => sum + t.amount_usd, 0)
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'from-green-500 to-green-600'
      case 'pending': return 'from-yellow-500 to-orange-500'
      case 'failed': return 'from-red-500 to-red-600'
      default: return 'from-gray-500 to-gray-600'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return '‚úÖ'
      case 'pending': return '‚è≥'
      case 'failed': return '‚ùå'
      default: return '‚ùì'
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'deposit': return 'üí∞'
      case 'withdrawal': return 'üí∏'
      default: return 'üí≥'
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-white mx-auto mb-4"></div>
          <p className="text-white text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100">
      {/* Navigation */}
      <Navigation userRole={userRole} onLogout={handleLogout} />

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
            <div className="flex items-center">
              <div className="h-12 w-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg mr-4">
                <span className="text-2xl">üìä</span>
              </div>
              <div>
                <h3 className="text-lg font-medium text-gray-900">–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
                <p className="text-3xl font-bold text-blue-600">{transactions.length}</p>
              </div>
            </div>
          </div>
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
            <div className="flex items-center">
              <div className="h-12 w-12 bg-gradient-to-r from-green-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg mr-4">
                <span className="text-2xl">üí∞</span>
              </div>
              <div>
                <h3 className="text-lg font-medium text-gray-900">–û–±—â–∞—è —Å—É–º–º–∞</h3>
                <p className="text-3xl font-bold text-green-600">{formatCurrency(getTotalAmount())}</p>
              </div>
            </div>
          </div>
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
            <div className="flex items-center">
              <div className="h-12 w-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg mr-4">
                <span className="text-2xl">‚úÖ</span>
              </div>
              <div>
                <h3 className="text-lg font-medium text-gray-900">–£—Å–ø–µ—à–Ω—ã—Ö</h3>
                <p className="text-3xl font-bold text-purple-600">
                  {transactions.filter(t => t.status === 'completed').length}
                </p>
              </div>
            </div>
          </div>
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 hover:shadow-2xl transition-all duration-300 hover:scale-105">
            <div className="flex items-center">
              <div className="h-12 w-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center shadow-lg mr-4">
                <span className="text-2xl">‚è≥</span>
              </div>
              <div>
                <h3 className="text-lg font-medium text-gray-900">–í –æ–∂–∏–¥–∞–Ω–∏–∏</h3>
                <p className="text-3xl font-bold text-orange-600">
                  {transactions.filter(t => t.status === 'pending').length}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 mb-8">
          <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
            <span className="mr-2">üîç</span>
            –§–∏–ª—å—Ç—Ä—ã
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
              </label>
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
              >
                <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
                <option value="deposit">üí∞ –î–µ–ø–æ–∑–∏—Ç</option>
                <option value="withdrawal">üí∏ –í—ã–≤–æ–¥</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –°—Ç–∞—Ç—É—Å
              </label>
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
              >
                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                <option value="completed">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                <option value="pending">‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏</option>
                <option value="failed">‚ùå –û—à–∏–±–∫–∞</option>
              </select>
            </div>
          </div>
        </div>

        {/* Transactions List */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 overflow-hidden">
          <div className="px-6 py-4 border-b border-white/20 bg-gradient-to-r from-blue-50 to-purple-50">
            <h2 className="text-lg font-bold text-gray-900">üìä –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-white/20">
              <thead className="bg-white/50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    üé∞ –ö–∞–∑–∏–Ω–æ
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    üí∞ –°—É–º–º–∞
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    üìä –°—Ç–∞—Ç—É—Å
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    üìÖ –î–∞—Ç–∞
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white/30 divide-y divide-white/20">
                {getFilteredTransactions().map((transaction) => (
                  <tr key={transaction.id} className="hover:bg-white/50 transition-colors duration-200">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10">
                          <div className="h-10 w-10 rounded-xl bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center shadow-lg">
                            <span className="text-lg">{getTypeIcon(transaction.transaction_type)}</span>
                          </div>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-bold text-gray-900 capitalize">
                            {transaction.transaction_type === 'deposit' ? '–î–µ–ø–æ–∑–∏—Ç' : '–í—ã–≤–æ–¥'}
                          </div>
                          <div className="text-sm text-gray-600">
                            {transaction.cards.card_number} ‚Ä¢ {transaction.cards.card_type}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-bold text-gray-900">
                        {transaction.casinos.name}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-bold text-gray-900">
                        {transaction.employees.full_name || transaction.employees.username}
                      </div>
                      <div className="text-sm text-gray-600">
                        @{transaction.employees.username}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`text-sm font-bold ${
                        transaction.transaction_type === 'deposit' ? 'text-green-600' : 'text-red-600'
                      } bg-white/70 px-3 py-1 rounded-lg inline-block`}>
                        {transaction.transaction_type === 'deposit' ? '+' : '-'}{formatCurrency(transaction.amount)}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full bg-gradient-to-r ${getStatusColor(transaction.status)} text-white shadow-lg`}>
                        {getStatusIcon(transaction.status)} {
                          transaction.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                          transaction.status === 'pending' ? '–í –æ–∂–∏–¥–∞–Ω–∏–∏' :
                          transaction.status === 'failed' ? '–û—à–∏–±–∫–∞' : transaction.status
                        }
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      üìÖ {formatDate(transaction.created_at)}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  )
}
