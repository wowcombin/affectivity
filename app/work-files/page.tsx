'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/app/components/Button'
import Navigation from '@/app/components/Navigation'
import { formatDate, formatCurrency } from '@/lib/utils'
import { toast } from 'sonner'

interface WorkEntry {
  id: string
  casino_name: string
  deposit_amount: number
  withdrawal_amount: number
  card_number: string
  card_expiry: string
  card_cvv: string
  account_username: string
  account_password: string
  card_type: 'pink' | 'gray'
  bank_name: string
  withdrawal_status: 'new' | 'sent' | 'received' | 'problem' | 'blocked'
  issue_description?: string
  created_at: string
  updated_at: string
  user?: {
    username: string
    role: string
  }
}

interface DraftFile {
  id: string
  name: string
  type: 'excel' | 'google_sheets'
  url?: string
  created_at: string
  user?: {
    username: string
    role: string
  }
}

export default function WorkFilesPage() {
  const [workEntries, setWorkEntries] = useState<WorkEntry[]>([])
  const [draftFiles, setDraftFiles] = useState<DraftFile[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [userRole, setUserRole] = useState('')
  const [showNewEntryForm, setShowNewEntryForm] = useState(false)
  const [showDraftForm, setShowDraftForm] = useState(false)
  const [currentMonth, setCurrentMonth] = useState('')
  const [formData, setFormData] = useState({
    casino_name: '',
    deposit_amount: '',
    withdrawal_amount: '',
    card_number: '',
    card_expiry: '',
    card_cvv: '',
    account_username: '',
    account_password: '',
    card_type: 'pink' as 'pink' | 'gray',
    bank_name: '',
    withdrawal_status: 'new' as 'new' | 'sent' | 'received' | 'problem' | 'blocked',
    issue_description: ''
  })
  const [draftFormData, setDraftFormData] = useState({
    name: '',
    type: 'excel' as 'excel' | 'google_sheets',
    url: ''
  })
  const router = useRouter()

  useEffect(() => {
    const userData = localStorage.getItem('user')
    if (userData) {
      const user = JSON.parse(userData)
      setUserRole(user.role)
      setCurrentMonth(new Date().toISOString().slice(0, 7))
      loadWorkFiles()
      loadDraftFiles()
    } else {
      router.push('/login')
    }
  }, [])

  const loadWorkFiles = async () => {
    try {
      const authToken = localStorage.getItem('auth-token')
      const response = await fetch('/api/work-files', {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        setWorkEntries(data.entries || [])
      } else {
        console.error('Failed to load work files')
        toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤')
      }
    } catch (error) {
      console.error('Work files error:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤')
    } finally {
      setIsLoading(false)
    }
  }

  const loadDraftFiles = async () => {
    try {
      const authToken = localStorage.getItem('auth-token')
      const response = await fetch('/api/work-files/drafts', {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        setDraftFiles(data.drafts || [])
      }
    } catch (error) {
      console.error('Draft files error:', error)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const authToken = localStorage.getItem('auth-token')
      const response = await fetch('/api/work-files', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(formData)
      })

      if (response.ok) {
        toast.success('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        setShowNewEntryForm(false)
        setFormData({
          casino_name: '',
          deposit_amount: '',
          withdrawal_amount: '',
          card_number: '',
          card_expiry: '',
          card_cvv: '',
          account_username: '',
          account_password: '',
          card_type: 'pink',
          bank_name: '',
          withdrawal_status: 'new',
          issue_description: ''
        })
        loadWorkFiles()
      } else {
        const error = await response.json()
        toast.error(error.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏')
      }
    } catch (error) {
      console.error('Submit error:', error)
      toast.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏')
    }
  }

  const handleDraftSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const authToken = localStorage.getItem('auth-token')
      const response = await fetch('/api/work-files/drafts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(draftFormData)
      })

      if (response.ok) {
        toast.success('–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        setShowDraftForm(false)
        setDraftFormData({
          name: '',
          type: 'excel',
          url: ''
        })
        loadDraftFiles()
      } else {
        const error = await response.json()
        toast.error(error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞')
      }
    } catch (error) {
      console.error('Draft submit error:', error)
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞')
    }
  }

  const updateStatus = async (entryId: string, status: string) => {
    try {
      const authToken = localStorage.getItem('auth-token')
      const response = await fetch(`/api/work-files/${entryId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify({ status })
      })

      if (response.ok) {
        toast.success('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!')
        loadWorkFiles()
      } else {
        toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')
      }
    } catch (error) {
      console.error('Status update error:', error)
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return 'from-blue-500 to-blue-600'
      case 'sent': return 'from-yellow-500 to-yellow-600'
      case 'received': return 'from-green-500 to-green-600'
      case 'problem': return 'from-red-500 to-red-600'
      case 'blocked': return 'from-gray-500 to-gray-600'
      default: return 'from-gray-500 to-gray-600'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'new': return 'üÜï'
      case 'sent': return 'üì§'
      case 'received': return '‚úÖ'
      case 'problem': return '‚ö†Ô∏è'
      case 'blocked': return 'üö´'
      default: return '‚ùì'
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-white mx-auto mb-4"></div>
          <p className="text-white text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤...</p>
        </div>
      </div>
    )
  }

  if (!['Employee', 'Manager', 'HR', 'Admin'].includes(userRole)) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900">
        <Navigation userRole={userRole} />
        <div className="container mx-auto px-4 py-8">
          <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-8 text-center">
            <div className="text-6xl mb-4">üö´</div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h3>
            <p className="text-gray-600">–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ HR –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —Ñ–∞–π–ª—ã</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900">
      <Navigation userRole={userRole} />
      
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                üìã –†–∞–±–æ—á–∏–µ —Ñ–∞–π–ª—ã
                {userRole === 'Admin' && <span className="text-sm text-blue-600 ml-2">(–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)</span>}
              </h1>
              <p className="text-gray-600">–ú–µ—Å—è—Ü: {currentMonth}</p>
            </div>
            <div className="flex space-x-4">
              <Button
                onClick={() => setShowNewEntryForm(true)}
                className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
              </Button>
              <Button
                onClick={() => setShowDraftForm(true)}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
              >
                üìÑ –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
              </Button>
            </div>
          </div>
        </div>

        {/* Work Entries */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6 mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">üìä –ó–∞–ø–∏—Å–∏ –æ —Ä–∞–±–æ—Ç–µ</h2>
          
          {workEntries.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-6xl mb-4">üìù</div>
              <p className="text-gray-600">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-gray-200">
                    {userRole === 'Admin' && (
                      <th className="text-left py-3 px-4 font-semibold text-gray-900">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th>
                    )}
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–ö–∞–∑–∏–Ω–æ</th>
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–î–µ–ø–æ–∑–∏—Ç</th>
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–í—ã–≤–æ–¥</th>
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–ö–∞—Ä—Ç–∞</th>
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–¢–∏–ø</th>
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–ë–∞–Ω–∫</th>
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–°—Ç–∞—Ç—É—Å</th>
                    <th className="text-left py-3 px-4 font-semibold text-gray-900">–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {workEntries.map((entry) => (
                    <tr key={entry.id} className="border-b border-gray-100 hover:bg-gray-50/50">
                      {userRole === 'Admin' && (
                        <td className="py-3 px-4">
                          <div>
                            <div className="font-semibold text-gray-900">{entry.user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                            <div className="text-sm text-gray-500">{entry.user?.role || 'Employee'}</div>
                          </div>
                        </td>
                      )}
                      <td className="py-3 px-4">
                        <div>
                          <div className="font-semibold text-gray-900">{entry.casino_name}</div>
                          <div className="text-sm text-gray-500">{entry.account_username}</div>
                        </div>
                      </td>
                      <td className="py-3 px-4">
                        <span className="text-green-600 font-semibold">
                          {formatCurrency(entry.deposit_amount)}
                        </span>
                      </td>
                      <td className="py-3 px-4">
                        <span className="text-blue-600 font-semibold">
                          {formatCurrency(entry.withdrawal_amount)}
                        </span>
                      </td>
                      <td className="py-3 px-4">
                        <div className="font-mono text-sm">
                          {entry.card_number.slice(0, 4)} **** **** {entry.card_number.slice(-4)}
                        </div>
                        <div className="text-xs text-gray-500">
                          {entry.card_expiry} | {entry.card_cvv}
                        </div>
                      </td>
                      <td className="py-3 px-4">
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                          entry.card_type === 'pink' 
                            ? 'bg-pink-100 text-pink-800' 
                            : 'bg-gray-100 text-gray-800'
                        }`}>
                          {entry.card_type === 'pink' ? 'ü©∑ –†–æ–∑–æ–≤–∞—è' : '‚ö´ –°–µ—Ä–∞—è'}
                        </span>
                      </td>
                      <td className="py-3 px-4 text-gray-900">{entry.bank_name}</td>
                      <td className="py-3 px-4">
                        <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold bg-gradient-to-r ${getStatusColor(entry.withdrawal_status)} text-white`}>
                          {getStatusIcon(entry.withdrawal_status)} {entry.withdrawal_status}
                        </span>
                      </td>
                      <td className="py-3 px-4">
                        <select
                          value={entry.withdrawal_status}
                          onChange={(e) => updateStatus(entry.id, e.target.value)}
                          className="text-sm border border-gray-300 rounded-lg px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="new">–ù–æ–≤—ã–π</option>
                          <option value="sent">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</option>
                          <option value="received">–ü–æ–ª—É—á–µ–Ω</option>
                          <option value="problem">–ü—Ä–æ–±–ª–µ–º–∞</option>
                          <option value="blocked">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</option>
                        </select>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Draft Files */}
        <div className="bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-white/20 p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏</h2>
          
          {draftFiles.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-6xl mb-4">üìÅ</div>
              <p className="text-gray-600">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {draftFiles.map((draft) => (
                <div key={draft.id} className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200">
                  <div className="flex items-center justify-between mb-4">
                    <div className="text-2xl">
                      {draft.type === 'excel' ? 'üìä' : 'üìã'}
                    </div>
                    <span className="text-xs text-gray-500">{formatDate(draft.created_at)}</span>
                  </div>
                  {userRole === 'Admin' && draft.user && (
                    <div className="mb-2">
                      <div className="text-xs text-gray-500">–°–æ–∑–¥–∞–ª: {draft.user.username}</div>
                      <div className="text-xs text-gray-500">–†–æ–ª—å: {draft.user.role}</div>
                    </div>
                  )}
                  <h3 className="font-semibold text-gray-900 mb-2">{draft.name}</h3>
                  <p className="text-sm text-gray-600 mb-4">
                    {draft.type === 'excel' ? 'Excel —Ç–∞–±–ª–∏—Ü–∞' : 'Google —Ç–∞–±–ª–∏—Ü–∞'}
                  </p>
                  {draft.url && (
                    <a
                      href={draft.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center text-blue-600 hover:text-blue-800 text-sm"
                    >
                      üîó –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                    </a>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* New Entry Modal */}
      {showNewEntryForm && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å</h2>
              
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üé∞ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∑–∏–Ω–æ
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.casino_name}
                      onChange={(e) => setFormData({...formData, casino_name: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üí∞ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      required
                      value={formData.deposit_amount}
                      onChange={(e) => setFormData({...formData, deposit_amount: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      required
                      value={formData.withdrawal_amount}
                      onChange={(e) => setFormData({...formData, withdrawal_amount: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.card_number}
                      onChange={(e) => setFormData({...formData, card_number: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="1234 5678 9012 3456"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.card_expiry}
                      onChange={(e) => setFormData({...formData, card_expiry: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="MM/YY"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üîê CVV
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.card_cvv}
                      onChange={(e) => setFormData({...formData, card_cvv: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="123"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üë§ –õ–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.account_username}
                      onChange={(e) => setFormData({...formData, account_username: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üîë –ü–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞
                    </label>
                    <input
                      type="password"
                      required
                      value={formData.account_password}
                      onChange={(e) => setFormData({...formData, account_password: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üé® –¢–∏–ø –∫–∞—Ä—Ç—ã
                    </label>
                    <select
                      value={formData.card_type}
                      onChange={(e) => setFormData({...formData, card_type: e.target.value as 'pink' | 'gray'})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="pink">ü©∑ –†–æ–∑–æ–≤–∞—è</option>
                      <option value="gray">‚ö´ –°–µ—Ä–∞—è</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      üè¶ –ë–∞–Ω–∫ –∫–∞—Ä—Ç—ã
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.bank_name}
                      onChange={(e) => setFormData({...formData, bank_name: e.target.value})}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                  </label>
                  <textarea
                    value={formData.issue_description}
                    onChange={(e) => setFormData({...formData, issue_description: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={3}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤—ã–≤–æ–¥–æ–º..."
                  />
                </div>
                
                <div className="flex space-x-4 pt-4">
                  <Button
                    type="button"
                    onClick={() => setShowNewEntryForm(false)}
                    className="flex-1 px-6 py-3 border border-gray-300 rounded-xl hover:bg-gray-50 transition-all duration-300 text-gray-700 hover:text-gray-900"
                  >
                    ‚ùå –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button
                    type="submit"
                    className="flex-1 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                  >
                    ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Draft Modal */}
      {showDraftForm && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full">
            <div className="p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">üìÑ –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫</h2>
              
              <form onSubmit={handleDraftSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                  </label>
                  <input
                    type="text"
                    required
                    value={draftFormData.name}
                    onChange={(e) => setDraftFormData({...draftFormData, name: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="–ú–æ–π —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    üìä –¢–∏–ø —Ñ–∞–π–ª–∞
                  </label>
                  <select
                    value={draftFormData.type}
                    onChange={(e) => setDraftFormData({...draftFormData, type: e.target.value as 'excel' | 'google_sheets'})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="excel">üìä Excel —Ç–∞–±–ª–∏—Ü–∞</option>
                    <option value="google_sheets">üìã Google —Ç–∞–±–ª–∏—Ü–∞</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                  </label>
                  <input
                    type="url"
                    value={draftFormData.url}
                    onChange={(e) => setDraftFormData({...draftFormData, url: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="https://..."
                  />
                </div>
                
                <div className="flex space-x-4 pt-4">
                  <Button
                    type="button"
                    onClick={() => setShowDraftForm(false)}
                    className="flex-1 px-6 py-3 border border-gray-300 rounded-xl hover:bg-gray-50 transition-all duration-300 text-gray-700 hover:text-gray-900"
                  >
                    ‚ùå –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button
                    type="submit"
                    className="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                  >
                    ‚úÖ –°–æ–∑–¥–∞—Ç—å
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
