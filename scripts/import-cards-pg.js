const { Client } = require('pg')

const connectionString = 'postgres://postgres.izjneklmbzgaihvwgwqx:CbJyOhauEs8QMVtD@aws-1-eu-west-2.pooler.supabase.com:6543/postgres?sslmode=require&supa=base-pooler.x'

// –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤ –∏ –∫–∞—Ä—Ç
const banksData = [
  {
    name: 'Georgina Brook',
    sort_code: '23-01-20',
    account_number: '49394661',
    login_url: 'https://my.duoplus.net/share?id=Nu0ma',
    login_password: 'gK1UFymb',
    bank_address: '16 Sunnybank Drive, SK9 6DY, Wilmslow, United Kingdom',
    cards: [
      { card_number: '4165490317741318', expiry_date: '08/30', cvv: '101' }
    ]
  },
  {
    name: 'Steven Paul Thompson',
    sort_code: '23-01-20',
    account_number: '50975703',
    login_url: 'https://my.duoplus.net/share?id=vOjWs',
    login_password: '9sWYLHlu',
    bank_address: 'Unit 11, Selby Business Park, YO8 8LZ, Selby, United Kingdom',
    cards: [
      { card_number: '4165490365359112', expiry_date: '08/30', cvv: '751' },
      { card_number: '4165490346209824', expiry_date: '08/30', cvv: '503' },
      { card_number: '4165490375488216', expiry_date: '08/30', cvv: '056' },
      { card_number: '4165490375281462', expiry_date: '08/30', cvv: '121' }
    ]
  },
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
]

async function importData() {
  const client = new Client({
    connectionString: connectionString,
    ssl: {
      rejectUnauthorized: false
    }
  })

  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...\n')

  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!\n')

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('BEGIN')

    // –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç—ã (–∫—Ä–æ–º–µ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö)
    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç...')
    const deleteResult = await client.query(`
      DELETE FROM cards 
      WHERE status = 'free'
    `)
    console.log(`  –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ä—Ç: ${deleteResult.rowCount}`)

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –±–∞–Ω–∫ UK
    console.log('\nüè¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–∞ UK...')
    let bankId
    const bankCheck = await client.query(`
      SELECT id FROM banks WHERE country = 'UK' LIMIT 1
    `)
    
    if (bankCheck.rows.length > 0) {
      bankId = bankCheck.rows[0].id
      console.log(`  –ë–∞–Ω–∫ UK —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${bankId}`)
    } else {
      const bankInsert = await client.query(`
        INSERT INTO banks (name, country, currency)
        VALUES ($1, $2, $3)
        RETURNING id
      `, ['UK Banks', 'UK', 'GBP'])
      bankId = bankInsert.rows[0].id
      console.log(`  –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–∞–Ω–∫ UK: ${bankId}`)
    }

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∫–∞—Ä—Ç—ã
    let totalAccounts = 0
    let totalCards = 0

    for (const accountData of banksData.slice(0, 3)) { // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —Ç–µ—Å—Ç–∞
      console.log(`\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountData.name}`)

      // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
      const accountResult = await client.query(`
        INSERT INTO bank_accounts (
          bank_id, account_name, account_number, sort_code,
          login_url, login_password, bank_address,
          pink_cards_daily_limit, pink_cards_remaining
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        RETURNING id
      `, [
        bankId, accountData.name, accountData.account_number,
        accountData.sort_code, accountData.login_url,
        accountData.login_password, accountData.bank_address,
        5, 5
      ])
      
      const accountId = accountResult.rows[0].id
      totalAccounts++
      console.log(`  ‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω`)

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      for (const card of accountData.cards) {
        await client.query(`
          INSERT INTO cards (
            bank_account_id, card_number, expiry_date, cvv,
            card_type, status
          ) VALUES ($1, $2, $3, $4, $5, $6)
        `, [
          accountId, card.card_number, card.expiry_date,
          card.cvv, 'gray', 'free'
        ])
        totalCards++
      }
      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${accountData.cards.length} –∫–∞—Ä—Ç`)
    }

    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT')
    
    console.log('\n' + '='.repeat(50))
    console.log('üìä –ò–¢–û–ì–ò –ò–ú–ü–û–†–¢–ê:')
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${totalAccounts} –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤`)
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${totalCards} –∫–∞—Ä—Ç`)
    console.log('='.repeat(50))

  } catch (error) {
    await client.query('ROLLBACK')
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  } finally {
    await client.end()
    console.log('\nüîö –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importData()
