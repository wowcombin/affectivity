const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

const supabaseUrl = 'https://izjneklmbzgaihvwgwqx.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml6am5la2xtYnpnYWlodndnd3F4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDk2ODU2MSwiZXhwIjoyMDUwNTQ0NTYxfQ.7vWrzOxIa6FdYZRKNVN2TXIEBu5hJT64UgLNUGnsUBw'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function applyMigrations() {
  console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n')

  const migrationsDir = path.join(__dirname, '..', 'supabase', 'migrations')
  const files = fs.readdirSync(migrationsDir).sort()

  for (const file of files) {
    if (!file.endsWith('.sql')) continue

    console.log(`\nüìÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${file}`)
    
    try {
      const filePath = path.join(migrationsDir, file)
      const sql = fs.readFileSync(filePath, 'utf8')
      
      // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const commands = sql
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0)
      
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${commands.length}`)
      
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i]
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (command.startsWith('--') || command.length === 0) continue
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ RPC
        const { data, error } = await supabase.rpc('exec_sql', {
          sql_query: command + ';'
        }).catch(err => {
          // –ï—Å–ª–∏ RPC –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
          return { data: null, error: err }
        })
        
        if (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
          if (error.message && (
            error.message.includes('already exists') ||
            error.message.includes('duplicate key') ||
            error.message.includes('relation') && error.message.includes('already exists')
          )) {
            console.log(`   ‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: –û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)`)
          } else {
            console.error(`   ‚ùå –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: –û—à–∏–±–∫–∞ - ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
          }
        } else {
          console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1}: –£—Å–ø–µ—à–Ω–æ`)
        }
      }
      
    } catch (err) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${err.message}`)
    }
  }
  
  console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
}

applyMigrations()



